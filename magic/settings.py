"""
Django settings for magic project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os, sys
import datetime
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# sys.path.insert(0, BASE_DIR)
# sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djan goproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xa7*_a^pb#rq7ngr0!s+wdbfi39hhacyl39%nhtxb82u&+86y5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ["*"]


# 重载系统的用户，让UserProfile生效
# AUTH_USER_MODEL = 'users.User'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.config',
    'apps.electron',
    'apps.order',
    'apps.scheme',
    'apps.product',
    'apps.users',
    'apps.verifications' ,
    'rest_framework',   # drf
    'rest_framework.authtoken',  # 授权
    'crispy_forms',     # 过滤
    'django_filters',   # 过滤
    # 'raven.contrib.django.raven_compat',  # 错误日志
    # 'drf_autodocs',
    # 'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 拦截请求，设置session到request
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 再次拦截请求，判断是否有session(上面已加入)，设置user到request
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'magic.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'magic.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'magic3',        #数据库名字
        'USER': 'root',          #账号
        'PASSWORD': 'mysql',    #密码
        # 'HOST': '47.93.198.159',     #IP
        'HOST': '127.0.0.1',     #IP
        'PORT': '3306',          #端口
    }
}

# redis数据库配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 配置给运营后台，不是给前台
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 配置验证码
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 购物车
    "cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60 * 24,
    # 缓存redis存储
    'DEFAULT_USE_CACHE': 'default',
}


# # auth entication_backends
# AUTHENTICATION_BACKENDS = (
#     'apps.users.views.CustomBackend',
# )

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


LOGGING = {
    'version': 1,
    # 是否要禁用其他的日志功能，False表示不禁用
    'disable_existing_loggers': False,
    # 日志输出时的格式
    'formatters': {
        # 详细
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        # 简单
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    # 日志过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 日志处理方式
    'handlers': {
        # 终端
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 文件
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "magic/logs/magic.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    # 日志器[处理日志的对象配置]
    'loggers': {
        'magic': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],
            # 是否要把当前日志向上一级传递
            'propagate': True,
        },
    }
}


# STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static')
# ]



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
QINIU_ACCESS_KEY = 'KFpSK9Lq0emOpqugOoCAoj3KHIGC_kyRVuouCRtC'
QINIU_SECRET_KEY = 'vK6qtFWR5fcyBC1CAQjjldjsA68_9dIzDdpD40WG'
QINIU_BUCKET_NAME = 'images'
QINIU_BUCKET_DOMAIN = 'pcrdmps89.bkt.clouddn.com'
QINIU_SECURE_URL = False      #使用http

# 客户端文件上传
PREFIX_URL = 'http://'
MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN + '/media/'
MEDIA_ROOT = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
DEFAULT_FILE_STORAGE = 'qiniustorage.backends.QiniuMediaStorage'
# 静态文件上传
# STATIC_URL = QINIU_BUCKET_DOMAIN + '/static/'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_STORAGE = 'qiniustorage.backends.QiniuStaticStorage'


# 手机号码验证
REGEX_MOBILE = "^1[358]\d{9}$|^147\d{8}$|^176\d{8}$"

# 重新设置DRF框架中的异常处理机制
REST_FRAMEWORK = {
    # 指定异常处理的函数
    'EXCEPTION_HANDLER': 'utils.exceptions.exception_handler',
    # 设置reset_framework中新增jwt认证机制
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # JSONWebTokenAuthentication 就是 安装模块中自带
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 原来rest框架中自带
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}



JWT_AUTH = {
    # jwt生成token的有效期,一天
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 设置jwt返回的数据
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'apps.users.utils.jwt_response_payload_handler',
}

# 重新指定Django框架中的用户认证模型类
AUTH_USER_MODEL = 'users.User' # 官方声明只需要填写   <子应用目录.模型类名>

# 重新设置了用户认证模型类判断用户名和密码的方法
AUTHENTICATION_BACKENDS = [
    'apps.users.utils.UsernameMobileAuthBackend',
]

import raven

# RAVEN_CONFIG = {
#     'dsn': 'https://ceaa216f949a4dffbdb355d33f1c3f5a:e92802760a124492841fcc8e6f982731@sentry.io/1232550'
#     # If you are using git, you can also automatically configure the
#     # release based on the git info.
#     # 'release': raven.fetch_git_sha(os.path.abspath(os.pardir)),
# }

# prefix
PREFIX = 'ic/'
PREFIX_BACK = 'ic/magic/'

